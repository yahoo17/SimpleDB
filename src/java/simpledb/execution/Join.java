package simpledb.execution;

import simpledb.common.Debug;
import simpledb.storage.Field;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate m_joinPredicate;
    private OpIterator m_child1;
    private OpIterator m_child2;
    private OpIterator[] opIterators;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        m_joinPredicate = p;
        m_child1 = child1;
        m_child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return m_joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        int index1 = m_joinPredicate.getField1();
        return m_child1.getTupleDesc().getFieldName(index1);

    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int index2 = m_joinPredicate.getField2();
        return m_child2.getTupleDesc().getFieldName(index2);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc tupleDesc1 = m_child1.getTupleDesc();
        TupleDesc tupleDesc2 = m_child2.getTupleDesc();
        return TupleDesc.merge(tupleDesc1,tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        m_child1.open();
        m_child2.open();
        super.open();
        init();
    }

    public void close() {
        // some code goes here
        m_child1.close();
        m_child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    private Tuple tuple1;
    private void init()
    {
        try {
            tuple1 = m_child1.next();
        } catch (DbException e) {
            e.printStackTrace();
        } catch (TransactionAbortedException e) {
            e.printStackTrace();
        }
    }
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while(true)
        {
            if (!m_child2.hasNext()&& !m_child1.hasNext())
            {
                return null;
            }
            else if(!m_child2.hasNext())
            {
                m_child2.rewind();
                tuple1 = m_child1.next();
            }

            Tuple tuple2 = m_child2.next();
            if( m_joinPredicate.filter(tuple1,tuple2))
            {
                Tuple res = new Tuple(getTupleDesc());
                int j = 0;
                for(int i = 0; i < tuple1.m_fieldList.length; i ++)
                {
                    Field t = tuple1.m_fieldList[i];
                    res.m_fieldList[j++]=t;
                }
                for(int i = 0; i < tuple2.m_fieldList.length; i++)
                {
                    Field t = tuple2.m_fieldList[i];
                    res.m_fieldList[j++]=t;
                }
                Debug.log(res.toString());
                return res;
            }
        }

    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        opIterators = new OpIterator[] {m_child1,m_child2};
        return  opIterators;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        opIterators = children;
    }

}
